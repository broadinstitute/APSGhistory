.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DK-ADMIN 1"
.TH DK-ADMIN 1 "2008-04-16" "Dotkit 1.0" "AX Local Docs"
.SH "NAME"
Basic task descriptions for the Dotkit administrator.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This man page gives instructions to the administrator,
covering several common situations.
.Sh "Installing Dotkit at a new site"
.IX Subsection "Installing Dotkit at a new site"
Here are a couple of basic pre-install questions to answer:
.PP
(1) Who will administer Dotkit for your site?
If there is more than one person,
it makes sense to set up a Unix group for Dotkit maintainers.
.PP
(2) Will any or all of them have root privileges?
This is not a requirement for Dotkit.
If you do use root, then group ownership of your Dotkit distribution
is less of an issue.
If you don't, it becomes more important.
(See \fIPreening the permission bits\fR below.
.IP "1.  Unpack the distribution tar file." 2
.IX Item "1.  Unpack the distribution tar file."
One approach is to choose a location for dotkit that is visible to all users,
typically an \s-1NFS\s0 file system mounted on every machine at your site.
Putting all your eggs in one basket requires a reliable basket.
.Sp
Another approach is to put a copy of Dotkit on each host,
at, say, \fI/usr/dotkit\fR or \fI/etc/dotkit\fR.
Then change one master copy, and utilize a synchronizing tool
to push or pull changes to each host.
This requires more work, but may provide better service in
a large network.
.Sp
For the sake of example, let's put Dotkit at \fI/foo\fR:
.Sp
.Vb 1
\&  % gunzip -c dotkit.tgz | (cd /foo; tar xf -)
.Ve
.IP "2.  Set the value of \s-1DK_ROOT\s0 in your current shell process." 2
.IX Item "2.  Set the value of DK_ROOT in your current shell process."
.Vb 2
\&  % setenv DK_ROOT /foo/dotkit # csh or tcsh
\&  % export DK_ROOT=/foo/dotkit # bash or ksh
.Ve
.IP "3.  Make necessary soft links." 2
.IX Item "3.  Make necessary soft links."
.Vb 2
\&  % cd /foo/dotkit/etc
\&  % make links
.Ve
.IP "4.  Format the man pages and html documents." 2
.IX Item "4.  Format the man pages and html documents."
.Vb 2
\&  % cd /foo/dotkit/man
\&  % make
.Ve
.IP "5.  Run the test suite." 2
.IX Item "5.  Run the test suite."
.Vb 5
\&  % cd /foo/dotkit/etc/test
\&  % make
\&  mutex1: ok (ksh) ok (bash) ok (csh) ok (tcsh) 
\&  recursive1: ok (ksh) ok (bash) ok (csh) ok (tcsh) 
\&   [ etc. ]
.Ve
.Sp
All the tests should complete without error for each shell
you support.
.IP "6.  Write dotkits to define your site." 2
.IX Item "6.  Write dotkits to define your site."
If your site is named \fIfoo\fR,
the convention for its Dotkit node name is \fIsite=foo\fR.
It is also conventional to locate the \fIsite=foo\fR
directory under \fI$DK_ROOT\fR,
but that is not a requirement.
.IP "7.  Add a maintainer file." 2
.IX Item "7.  Add a maintainer file."
Create a one line file, \f(CW$DK_ROOT\fR/etc/DK_MAINTAINER, with
your name and email address.
This is read and output by the \fIuse-usage\fR script,
also in the \fIetc\fR subdirectory.
.IP "8.  Add a site node definition file." 2
.IX Item "8.  Add a site node definition file."
Create a one line file, \f(CW$DK_ROOT\fR/etc/DK_NODE.
It contains one or more colon separated pathnames
to your site specific Dotkit nodes.
.IP "9.  Verify that \fIetc/systype\fR produces correct results." 2
.IX Item "9.  Verify that etc/systype produces correct results."
Each platform architecture at your site is expected to
have an associated \fI\s-1SYS_TYPE\s0\fR.
The value of that environment variable is used by Dotkit
to find kits that are specific to the given platform.
.Sp
If \f(CW$SYS_TYPE\fR is pre-defined before initializing Dotkit,
that value is accepted.
Otherwise, \fI$DK_ROOT/init\fR calls the script 
\&\fI$DK_ROOT/etc/systype\fR,
which attempts to compute an appropriate value for \fI\s-1SYS_TYPE\s0\fR.
.Sp
If you have another system in place to define \fI\s-1SYS_TYPE\s0\fR,
such as setting it in \fI/etc/profile\fR,
this step may not be necessary.
Dotkit will still work even if \fI\s-1SYS_TYPE\s0\fR is unknown,
but it obviously will not find any \fI\s-1SYS_TYPE\s0\fR\-specific kits.
.Sh "Supporting the Dotkit user"
.IX Subsection "Supporting the Dotkit user"
A variety of problems may be presented,
some more common than others
Here is a list of things to check,
that will likely make the solution clear for the common issues.
.IP "1. Check the variables related to Dotkit:" 2
.IX Item "1. Check the variables related to Dotkit:"
Generate a list of Dotkit-related
environment and shell variables as follows:
.Sp
.Vb 1
\&  (env;set) | grep -i dk | sort -u
.Ve
.Sp
Five variables are essential:
.RS 2
.IP "\(bu \s-1DK_ROOT:\s0 The location where Dotkit is installed." 2
.IX Item "DK_ROOT: The location where Dotkit is installed."
.PD 0
.IP "\(bu \s-1DK_NODE:\s0 Zero or more additional nodes to search." 2
.IX Item "DK_NODE: Zero or more additional nodes to search."
.IP "\(bu \s-1DK_SUBNODE:\s0 The sub-directories within a node." 2
.IX Item "DK_SUBNODE: The sub-directories within a node."
.IP "\(bu _dk_rl: The current recursion level." 2
.IX Item "_dk_rl: The current recursion level."
.PD
The last variable (_dk_rl) should always have a value of \-1
when your shell is at the prompt.
If it does not,
the most common cause is a keyboard
interrupt (Control\-C) while the shell
is in the process of reading a dotkit.
Typing \*(L"use\*(R" with no arguments should restore the correct value.
.IP "\(bu _dk_inuse: List of packages currently in use." 2
.IX Item "_dk_inuse: List of packages currently in use."
This is a whitespace-separated list of the packages that
have been used.
The trailing digit on each name is the recursion level
at which the package was encountered.
.RE
.RS 2
.Sp
Some additional Dotkit-related variables may also appear.
\&\fI_dk_sev_FOO\fR is the saved value of an environment
variable named \fI\s-1FOO\s0\fR,
which was reset by some package as it loaded.
The saved value will be restored to \fI\s-1FOO\s0\fR
(and \fI_dk_sev_FOO\fR will disappear)
when the package is unused.
.RE
.IP "2. Verify they are finding the expected dotkit." 2
.IX Item "2. Verify they are finding the expected dotkit."
Run \fIreuse \-v foo\fR, where \fIfoo\fR is the name of any dotkit
that seems to be mis\-behaving.
This will show you exactly which file is ultimately being source'ed.
.Sp
Shell startup can get very complicated.
It is not unusual to load a particular dotkit,
and then have some other (non\-Dotkit) command buried in an
obscure startup file change the \s-1PATH\s0 variable in
an unexpected way.
.Sp
The user complains that kit \fIfoo\fR is \*(L"already loaded\*(R",
but the component it was supposed to add to \s-1PATH\s0 isn't there.
Trying to \*(L"use foo\*(R" won't fix the trouble.
However, \*(L"reuse foo\*(R" is often a good strategy in this situation,
because it generally will make things work while you try to
figure out what really went wrong.
There is a special dotkit \fIreuse\fR that sets environment variable
\&\fI\s-1DK_UEQRU\s0\fR to 1.
When this is so,
the \fIuse\fR command always behaves as if \fIreuse\fR had been typed.
Some sites like to do this as a matter of policy.
.ie n .IP "3. Verify that $DK_ROOT/init is doing the right thing." 2
.el .IP "3. Verify that \f(CW$DK_ROOT\fR/init is doing the right thing." 2
.IX Item "3. Verify that $DK_ROOT/init is doing the right thing."
Normally, you \fIeval\fR the output of this script:
.Sp
.Vb 1
\&  eval `/usr/gapps/dotkit/init`
.Ve
.Sp
For debugging purposes, you can run it directly,
(take off the \fIeval\fR and the surrounding backquotes,)
and check that it is printing the correct set of commands
for your shell.
.Sp
The init script emits a pair of shell-independent commands that
set the value of \f(CW$DK_ROOT\fR, if it wasn't set already,
then pass further processing on to a shell-specific script that
does the rest of the setup.
.Sp
If your shell seems to be getting confused, (\*(L"export: command not
found\*(R", or \*(L"setenv: command not found\*(R", or \*(L"unbound variable\*(R", or
\&\*(L"parameter not set\*(R") it is possible to force
the init script to emit commands for a particular kind of shell.
Use the \*(L"\-b\*(R" option to force Bourne-shell (bash or ksh) style initialization.
Use the \*(L"\-c\*(R" option to force C\-shell (csh or tcsh) style initialization.
.IP "4. Look at the output from \fIuse-usage\fR." 2
.IX Item "4. Look at the output from use-usage."
The script \fI$DK_ROOT/etc/use\-usage\fR is run whenever you
type ``use'' with no arguments.
You can also run it directly.
Verify that the list of packages on the first screen
matches \fI_dk_inuse\fR,
and that the Dotkit search path
matches the values in \fI\s-1DK_ROOT\s0\fR, \fI\s-1DK_NODE\s0\fR, and \fI\s-1DK_SUBNODE\s0\fR.
Its arguments are documented at the beginning of the script.
.Sh "Adding, changing, or removing a dotkit"
.IX Subsection "Adding, changing, or removing a dotkit"
Decide where the new dotkit belongs.
If it is a personal preference,
it belongs in \fI$HOME/.kits\fR.
Otherwise, it may be part of
a group project, site\-specific, or universal.
.PP
Group projects that want to define dotkits for their use
typically need to add a group node to \s-1DK_NODE\s0 before
initializing Dotkit:
.PP
.Vb 2
\&  setenv DK_NODE /usr/local/share/<project>/kits
\&  eval `/foo/dotkit/init`
.Ve
.PP
Site-specific kits are added under the \fIsite=XYZ\fR directory,
while universal kits are under \f(CW$DK_ROOT\fR itself.
.PP
See the dk-examples(5) man page for a listing of Dotkit categories
and many example dotkits.
After your change is complete,
be sure to commit it to your source code management system,
and preen permission bits:
.PP
.Vb 2
\&  % cd $DK_ROOT
\&  % ./etc/preen
.Ve
.Sh "Updating the man or html pages"
.IX Subsection "Updating the man or html pages"
Source text for the man and html pages is located at \fI$DK_ROOT/man\fR.
The format is known as \s-1POD\s0 (Plain Old Documentation),
developed and distributed as part of the Perl language.
See the \fIperlpod\fR, \fIpod2man\fR, and \fIpod2html\fR man pages
for details on how to write and process \s-1POD\s0 files.
.PP
Briefly, modify the appropriate \fI*.pod\fR file in \fI$DK_ROOT/man\fR,
then run \fImake\fR.
If there are no errors,
this should reconstitute the formatted man and html pages.
You need to be on a platform where the full Perl distribution
is installed in order to run \fIpod2man\fR, etc.
.Sh "Running the test suite"
.IX Subsection "Running the test suite"
Change directory to \f(CW$DK_ROOT\fR/etc/test,
and run \fImake\fR.
This should run a series of \fImutex\fR,
\&\fIrecursive\fR, and \fIsimple\fR regression tests for
each supported shell.
You hope to see \fIok\fR for every test and every shell.
If you do, it means that every file under the \fIdif\fR
sub-directory will be zero length.
.PP
If there is a problem,
you can inspect the corresponding \fIdif\fR file to begin
analyzing what went wrong.
.Sh "Adding an \s-1MOTD\s0 (message of the day)"
.IX Subsection "Adding an MOTD (message of the day)"
Create a file named \fIdk-news\fR,
located at \fI$DK_ROOT/etc\fR,
with the literal text of your message.
Every user who subsequently runs \fIuse\fR without arguments
will see your text on the first splash page of output.
.Sh "Preening the permission bits"
.IX Subsection "Preening the permission bits"
If a group of people administer Dotkit for a site,
it is best to create a Unix group,
say \fIdotkit\fR, with those users in it.
There is a script at \fI$DK_ROOT/etc/preen\fR,
which will attempt to make all the files under \f(CW$DK_ROOT\fR
have the correct group ownership and permission bits.
(Permissions are generally set to allow group write on
files and directories,
and world read/access/execute as appropriate.)
If the Dotkit administrative group does not use \fIroot\fR,
then each dotkit administrator needs to run \fIpreen\fR
whenever they change files,
to set the permissions on files that they own.
.Sh "Making a tar ball"
.IX Subsection "Making a tar ball"
Change directory to \fI$DK_ROOT/etc\fR,
and run \fImake export\fR.
Anyone can do this,
as it does not change anything under \f(CW$DK_ROOT\fR.
(It does elide \s-1CVS\s0 subdirectories from the output tar file.)
.PP
The smallest tar file is made using
\&\fImake clean export\fR (note whitespace),
which throws away all temporary files, soft links,
and the formatted man pages.
.PP
A third option is \fImake cleanexport\fR,
which re-creates the formatted man pages before tarring up the result.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
(Dotkit environment variables are documented in dk-commands(5).)
.SH "AUTHOR"
.IX Header "AUTHOR"
The original author of Dotkit is
Lee Busby, Lawrence Livermore National Laboratory.
Adam Moody, also of \s-1LLNL\s0,
has made additional major contributions.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2007, Lawrence Livermore National Security, \s-1LLC\s0.
See the file named \*(L"Copyright\*(R" for the full text of the copyright notice.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
dk-commands(5), dk-examples(5), dotkit(7), use(1), dk-admin(8).
