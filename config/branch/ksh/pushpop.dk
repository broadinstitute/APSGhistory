#c shell
#d Pushd/popd for ksh

#h Adapted from dot.mkshrc,  MirBSD Korn Shell
#h copyright Thorsten "mirabilos" Glaser <tg@mirbsd.de>

if [[ $_dk_op = "use" ]]; then

  DIRSTACKBASE=$(readlink -nf ~/. 2>&- || print -nr -- "$HOME")
  typeset -r DIRSTACKBASE
  set -A DIRSTACK
  function chpwd {
  	DIRSTACK[0]=$(readlink -nf . 2>&- || print -nr -- "$PWD")
  	[[ ${DIRSTACK[0]#$DIRSTACKBASE} = ${DIRSTACK[0]} ]] || \
  	    DIRSTACK[0]=\~${DIRSTACK[0]#$DIRSTACKBASE}
  	:
  }
  chpwd .
  function cd {
  	command cd "$@"
  	chpwd "$@"
  }
  function cd_csh {
  	typeset d t=$1
  
  	[[ $t = ~* ]] && t=$DIRSTACKBASE${t#\~}
  	if ! d=$(command cd "$t" 2>&1); then
  		print -u2 "${1}: ${d##*$t - }."
  		return 1
  	fi
  	cd "$t"
  }
  function dirs {
  	typeset d
  	typeset -i isnoglob=0 fl=0 fv=0 fn=0 cpos=0
  
  	[[ $(set +o) == *-o\ noglob* ]] && isnoglob=1
  	set -o noglob
  	while getopts ":lvn" d; do
  		case $d {
  		(l)	fl=1 ;;
  		(v)	fv=1 ;;
  		(n)	fn=1 ;;
  		(*)	print -u2 'Usage: dirs [-lvn].'
  			return 1 ;;
  		}
  	done
  	shift $((OPTIND - 1))
  	if (( $# > 0 )); then
  		print -u2 'Usage: dirs [-lvn].'
  		return 1
  	fi
  	if (( fv )); then
  		fv=0
  		while (( fv < ${#DIRSTACK[*]} )); do
  			d=${DIRSTACK[fv]}
  			[[ $fl$d = 1~* ]] && d=$DIRSTACKBASE${d#\~}
  			print -r -- "$fv	$d"
  			let fv++
  		done
  	else
  		fv=0
  		while (( fv < ${#DIRSTACK[*]} )); do
  			d=${DIRSTACK[fv]}
  			[[ $fl$d = 1~* ]] && d=$DIRSTACKBASE${d#\~}
  			if (( fn && (cpos+=${#d}+1) >= 79 && ${#d} < 80 )); then
  				print
  				(( cpos = ${#d} + 1 ))
  			fi
  			print -nr -- "$d "
  			let fv++
  		done
  		print
  	fi
  	(( isnoglob )) || set +o noglob
  	return 0
  }
  function popd {
  	typeset d fa
  	typeset -i isnoglob=0 n=1
  
  	[[ $(set +o) == *-o\ noglob* ]] && isnoglob=1
  	set -o noglob
  	while getopts ":0123456789lvn" d; do
  		case $d {
  		(l|v|n)	fa="$fa -$d" ;;
  		(+*)	n=2
  			break ;;
  		(*)	print -u2 'Usage: popd [-lvn] [+<n>].'
  			return 1 ;;
  		}
  	done
  	shift $((OPTIND - n))
  	n=0
  	if (( $# > 1 )); then
  		print -u2 popd: Too many arguments.
  		return 1
  	elif [[ $1 = ++([0-9]) && $1 != +0 ]]; then
  		if (( (n = ${1#+}) >= ${#DIRSTACK[*]} )); then
  			print -u2 popd: Directory stack not that deep.
  			return 1
  		fi
  	elif [[ -n $1 ]]; then
  		print -u2 popd: Bad directory.
  		return 1
  	fi
  	if (( ${#DIRSTACK[*]} < 2 )); then
  		print -u2 popd: Directory stack empty.
  		return 1
  	fi
  	unset DIRSTACK[n]
  	set -A DIRSTACK -- "${DIRSTACK[@]}"
  	cd_csh "${DIRSTACK[0]}" || return 1
  	(( isnoglob )) || set +o noglob
  	dirs $fa
  }
  function pushd {
  	typeset d fa
  	typeset -i isnoglob=0 n=1
  
  	[[ $(set +o) == *-o\ noglob* ]] && isnoglob=1
  	set -o noglob
  	while getopts ":0123456789lvn" d; do
  		case $d {
  		(l|v|n)	fa="$fa -$d" ;;
  		(+*)	n=2
  			break ;;
  		(*)	print -u2 'Usage: pushd [-lvn] [<dir>|+<n>].'
  			return 1 ;;
  		}
  	done
  	shift $((OPTIND - n))
  	if (( $# == 0 )); then
  		if (( ${#DIRSTACK[*]} < 2 )); then
  			print -u2 pushd: No other directory.
  			return 1
  		fi
  		d=${DIRSTACK[1]}
  		DIRSTACK[1]=${DIRSTACK[0]}
  		cd_csh "$d" || return 1
  	elif (( $# > 1 )); then
  		print -u2 pushd: Too many arguments.
  		return 1
  	elif [[ $1 = ++([0-9]) && $1 != +0 ]]; then
  		if (( (n = ${1#+}) >= ${#DIRSTACK[*]} )); then
  			print -u2 pushd: Directory stack not that deep.
  			return 1
  		fi
  		while (( n-- )); do
  			d=${DIRSTACK[0]}
  			unset DIRSTACK[0]
  			set -A DIRSTACK -- "${DIRSTACK[@]}" "$d"
  		done
  		cd_csh "${DIRSTACK[0]}" || return 1
  	else
  		set -A DIRSTACK -- placeholder "${DIRSTACK[@]}"
  		cd_csh "$1" || return 1
  	fi
  	(( isnoglob )) || set +o noglob
  	dirs $fa
  }

else # unuse
  unset -f chpwd cd cd_csh dirs popd pushd
  unset DIRSTACKBASE DIRSTACK
fi
